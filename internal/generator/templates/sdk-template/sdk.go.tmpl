// Code generated by coattail; DO NOT EDIT.
package sdk

import (
    {{if gt (len .Actions) 0}}"{{ .PackageName }}/pkg/types"{{end}}
	"context"
	"fmt"

	"github.com/nathan-fiscaletti/coattail-go/pkg/coattailtypes"
)

type Sdk struct {
	peer *coattailtypes.Peer
}

func NewSdk(peer *coattailtypes.Peer) *Sdk {
	return &Sdk{
		peer: peer,
	}
}
{{ range $action := .Actions }}
func (s *Sdk) {{ $action.Name }}(ctx context.Context{{if $action.InputType}}, arg {{$action.InputType}}{{end}}) {{if $action.OutputType}}({{$action.OutputType}}, error){{else}}error{{end}} {
    {{if $action.OutputType}}res{{else}}_{{end}}, err := s.peer.Run(ctx, "{{ $action.Name }}", {{if $action.InputType}}arg{{else}}nil{{end}}){{if $action.OutputType}}

    if err != nil {
        return {{$action.OutputType}}{}, err
    }

    if out, ok := res.({{$action.OutputType}}); ok {
        return out, nil
    }

    return {{$action.OutputType}}{}, fmt.Errorf("unexpected response type: %T", res){{else}}
    return err{{end}}
}
{{end}}